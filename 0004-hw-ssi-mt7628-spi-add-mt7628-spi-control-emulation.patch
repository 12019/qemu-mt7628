From 97c67a682669993843dc0f0633096991979577e0 Mon Sep 17 00:00:00 2001
From: LuHui <luhux76@gmail.com>
Date: Wed, 15 Feb 2023 22:17:42 +0800
Subject: [PATCH 4/6] hw/ssi/mt7628-spi: add mt7628 spi control emulation

Signed-off-by: LuHui <luhux76@gmail.com>
---
 hw/ssi/Kconfig              |   4 +
 hw/ssi/meson.build          |   1 +
 hw/ssi/mt7628-spi.c         | 290 ++++++++++++++++++++++++++++++++++++
 include/hw/ssi/mt7628-spi.h |  48 ++++++
 4 files changed, 343 insertions(+)
 create mode 100644 hw/ssi/mt7628-spi.c
 create mode 100644 include/hw/ssi/mt7628-spi.h

diff --git a/hw/ssi/Kconfig b/hw/ssi/Kconfig
index 7d90a02181..694e01ede1 100644
--- a/hw/ssi/Kconfig
+++ b/hw/ssi/Kconfig
@@ -20,3 +20,7 @@ config XILINX_SPIPS
 config STM32F2XX_SPI
     bool
     select SSI
+
+config MT7628_SPI
+    bool
+    select SSI
diff --git a/hw/ssi/meson.build b/hw/ssi/meson.build
index 702aa5e4df..82c7972a91 100644
--- a/hw/ssi/meson.build
+++ b/hw/ssi/meson.build
@@ -11,3 +11,4 @@ softmmu_ss.add(when: 'CONFIG_XLNX_VERSAL', if_true: files('xlnx-versal-ospi.c'))
 softmmu_ss.add(when: 'CONFIG_IMX', if_true: files('imx_spi.c'))
 softmmu_ss.add(when: 'CONFIG_OMAP', if_true: files('omap_spi.c'))
 softmmu_ss.add(when: 'CONFIG_IBEX', if_true: files('ibex_spi_host.c'))
+softmmu_ss.add(when: 'CONFIG_MT7628_SPI', if_true: files('mt7628-spi.c'))
diff --git a/hw/ssi/mt7628-spi.c b/hw/ssi/mt7628-spi.c
new file mode 100644
index 0000000000..dc3566e3ff
--- /dev/null
+++ b/hw/ssi/mt7628-spi.c
@@ -0,0 +1,290 @@
+/*
+ * mt7628 spi master control
+ *
+ * Copyright (c) 2023 Lu Hui <luhux76@gmail.com>
+ * some code from linux kernel:
+ * drivers/spi/spi-mt7621.c
+ * Copyright (C) 2011 Sergiy <piratfm@gmail.com>
+ * Copyright (C) 2011-2013 Gabor Juhos <juhosg@openwrt.org>
+ * Copyright (C) 2014-2015 Felix Fietkau <nbd@nbd.name>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2 or later, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "qemu/osdep.h"
+#include "hw/irq.h"
+#include "hw/qdev-properties.h"
+#include "hw/sysbus.h"
+#include "hw/ssi/ssi.h"
+#include "qemu/log.h"
+#include "qemu/module.h"
+#include "hw/ssi/mt7628-spi.h"
+
+/*
+ * TODO:
+ * chip select
+ * byte order select
+ */
+
+/* #define DEBUG_MT7628_SPI */
+
+#ifdef DEBUG_MT7628_SPI
+#define DPRINTF(fmt, ...) \
+do { printf("mt7628-spi: " fmt , ## __VA_ARGS__); } while (0)
+#else
+#define DPRINTF(fmt, ...) do {} while (0)
+#endif
+
+enum {
+    REG_SPI_TRANS    = 0x00,
+    REG_SPI_OPADDR   = 0x04,
+    REG_SPI_DIDO0    = 0x08,
+    REG_SPI_DIDO1    = 0x0C,
+    REG_SPI_DIDO2    = 0x10,
+    REG_SPI_DIDO3    = 0x14,
+    REG_SPI_DIDO4    = 0x18,
+    REG_SPI_DIDO5    = 0x1C,
+    REG_SPI_DIDO6    = 0x20,
+    REG_SPI_DIDO7    = 0x24,
+    REG_SPI_MOREBUF  = 0x2C,
+    REG_SPI_MASTER   = 0x28,
+    REG_SPI_CS_POLAR = 0x38,
+};
+
+/* reg shift */
+#define TRANS_START 8
+#define TRANS_BUSY  16
+#define MOREBUF_TXBITCNT    0
+#define MOREBUF_RXBITCNT    12
+#define MOREBUF_CMDBITCNT   24
+#define MASTER_BUFMODE      2
+#define MASTER_FULL_DUPLEX  10
+
+static void mt7628_spi_transfer(mt7628SpiState *s)
+{
+    if (s->trans_start == 0) {
+        return;
+    }
+    if (s->trans_busy  == 1) {
+        return;
+    }
+    s->trans_busy = 1;
+
+    uint8_t txbuf[MT7628_SPI_TX_BUFSIZE];
+    uint8_t *txbufp = txbuf;
+    memset(txbuf, 0, MT7628_SPI_TX_BUFSIZE);
+
+    uint32_t val = s->opcode;
+    if ((s->cmd_bitcount / 8) == 4) {
+        /* The byte-order of the opcode is weird!    --- from linux kernel */
+        val = bswap32(val);
+        DPRINTF("opcode len is 4, swap it! : %08X\n", val);
+    }
+    memcpy(txbufp, &val, s->cmd_bitcount / 8);
+    txbufp += s->cmd_bitcount / 8;
+    memcpy(txbufp, s->dido, s->tx_bitcount / 8);
+    txbufp += s->tx_bitcount / 8;
+
+    /* send opcode and data to slave */
+    int tx_i = 0;
+    while (tx_i < ((s->cmd_bitcount / 8) + (s->tx_bitcount / 8))) {
+        ssi_transfer(s->spi, txbuf[tx_i]);
+        DPRINTF("SEND TO SLAVE: %02X\n", txbuf[tx_i]);
+        tx_i++;
+    }
+    /* recv data from slave */
+    int rx_i = 0;
+    while (rx_i < (s->rx_bitcount / 8)) {
+        s->dido[rx_i] = ssi_transfer(s->spi, 0);
+        DPRINTF("RECV FROM SLAVE: %02X\n", s->dido[rx_i]);
+        rx_i++;
+    }
+
+    s->trans_busy = 0;
+    s->trans_start = 0;
+    return;
+}
+
+static void mt7628_spi_reset(DeviceState *d)
+{
+    mt7628SpiState *s = MT7628_SPI(d);
+    s->trans_start = 0;
+    s->trans_busy = 0;
+    s->bufmode = 0;
+    s->full_duplex = 0;
+    s->tx_bitcount = 0;
+    s->rx_bitcount = 0;
+    s->cmd_bitcount = 0;
+    s->opcode = 0;
+    memset(s->dido, 0x0, MT7628_SPI_RX_BUFSIZE);
+    s->cs[0] = 0;
+    s->cs[1] = 0;
+    qemu_set_irq(s->cs_lines[0], !(s->cs[0]));
+    qemu_set_irq(s->cs_lines[1], !(s->cs[1]));
+}
+
+static uint64_t mt7628_spi_read(void *opaque, hwaddr addr, unsigned int size)
+{
+    mt7628SpiState *s = opaque;
+    uint32_t val = 0x0;
+    uint32_t *data_reg = (uint32_t *)s->dido;
+    switch (addr) {
+    case REG_SPI_TRANS:
+        /* trans_start is always return 0 */
+        val |= s->trans_busy << TRANS_BUSY;
+        return val;
+    case REG_SPI_OPADDR:
+        val = s->opcode;
+        return val;
+    case REG_SPI_DIDO0:
+        return *(data_reg + 0);
+    case REG_SPI_DIDO1:
+        return *(data_reg + 1);
+    case REG_SPI_DIDO2:
+        return *(data_reg + 2);
+    case REG_SPI_DIDO3:
+        return *(data_reg + 3);
+    case REG_SPI_DIDO4:
+        return *(data_reg + 4);
+    case REG_SPI_DIDO5:
+        return *(data_reg + 5);
+    case REG_SPI_DIDO6:
+        return *(data_reg + 6);
+    case REG_SPI_DIDO7:
+        return *(data_reg + 7);
+    case REG_SPI_MOREBUF:
+        val |= s->tx_bitcount << MOREBUF_TXBITCNT;
+        val |= s->rx_bitcount << MOREBUF_RXBITCNT;
+        val |= s->cmd_bitcount << MOREBUF_CMDBITCNT;
+        return val;
+    case REG_SPI_MASTER:
+        val |= s->bufmode << MASTER_BUFMODE;
+        val |= s->full_duplex << MASTER_FULL_DUPLEX;
+        return val;
+    case REG_SPI_CS_POLAR:
+        val |= s->cs[0] << 0;
+        val |= s->cs[1] << 1;
+        return val;
+    default:
+        return 0x0;
+    }
+}
+
+static void mt7628_spi_write(void *opaque, hwaddr addr,
+                             uint64_t val64, unsigned int size)
+{
+    mt7628SpiState *s = opaque;
+    uint32_t *data_reg = (uint32_t *)s->dido;
+    uint32_t value = val64;
+    switch (addr) {
+    case REG_SPI_TRANS:
+        /* trans_busy is RO */
+        s->trans_start = test_bit(TRANS_START, (void *)&value);
+        break;
+    case REG_SPI_OPADDR:
+        s->opcode = value;
+        break;
+    case REG_SPI_DIDO0:
+        data_reg[0] = value;
+        break;
+    case REG_SPI_DIDO1:
+        data_reg[1] = value;
+        break;
+    case REG_SPI_DIDO2:
+        data_reg[2] = value;
+        break;
+    case REG_SPI_DIDO3:
+        data_reg[3] = value;
+        break;
+    case REG_SPI_DIDO4:
+        data_reg[4] = value;
+        break;
+    case REG_SPI_DIDO5:
+        data_reg[5] = value;
+        break;
+    case REG_SPI_DIDO6:
+        data_reg[6] = value;
+        break;
+    case REG_SPI_DIDO7:
+        data_reg[7] = value;
+        break;
+    case REG_SPI_MOREBUF:
+        s->tx_bitcount = extract32(value, MOREBUF_TXBITCNT, 9);
+        s->rx_bitcount = extract32(value, MOREBUF_RXBITCNT, 9);
+        s->cmd_bitcount = extract32(value, MOREBUF_CMDBITCNT, 6);
+        break;
+    case REG_SPI_MASTER:
+        s->bufmode     = test_bit(MASTER_BUFMODE, (void *)&value);
+        s->full_duplex = test_bit(MASTER_FULL_DUPLEX, (void *)&value);
+        break;
+    case REG_SPI_CS_POLAR:
+        s->cs[0] = test_bit(0, (void *)&value);
+        s->cs[1] = test_bit(1, (void *)&value);
+        qemu_set_irq(s->cs_lines[0], !(s->cs[0]));
+        qemu_set_irq(s->cs_lines[1], !(s->cs[1]));
+        break;
+    default:
+        break;
+    }
+    if (s->trans_start) {
+        mt7628_spi_transfer(s);
+    }
+}
+
+static const MemoryRegionOps mt7628_spi_ops = {
+    .read = mt7628_spi_read,
+    .write = mt7628_spi_write,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .valid = {
+        .min_access_size = 4,
+        .max_access_size = 4
+    }
+};
+
+static void mt7628_spi_realize(DeviceState *dev, Error **errp)
+{
+    SysBusDevice *sbd = SYS_BUS_DEVICE(dev);
+    mt7628SpiState *s = MT7628_SPI(dev);
+
+    s->spi = ssi_create_bus(dev, "spi");
+
+
+    memory_region_init_io(&s->mmio, OBJECT(s), &mt7628_spi_ops, s,
+                          TYPE_MT7628_SPI, 0xFF);
+    sysbus_init_mmio(sbd, &s->mmio);
+
+    sysbus_init_irq(sbd, &s->cs_lines[0]);
+    sysbus_init_irq(sbd, &s->cs_lines[1]);
+}
+
+static void mt7628_spi_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+
+    dc->reset = mt7628_spi_reset;
+    dc->realize = mt7628_spi_realize;
+}
+
+static const TypeInfo mt7628_spi_info = {
+    .name           = TYPE_MT7628_SPI,
+    .parent         = TYPE_SYS_BUS_DEVICE,
+    .instance_size  = sizeof(mt7628SpiState),
+    .class_init     = mt7628_spi_class_init,
+};
+
+static void mt7628_spi_register_types(void)
+{
+    type_register_static(&mt7628_spi_info);
+}
+
+type_init(mt7628_spi_register_types)
diff --git a/include/hw/ssi/mt7628-spi.h b/include/hw/ssi/mt7628-spi.h
new file mode 100644
index 0000000000..da028362b2
--- /dev/null
+++ b/include/hw/ssi/mt7628-spi.h
@@ -0,0 +1,48 @@
+/*
+ * mt7628 spi master
+ *
+ * Copyright (c) 2023 Lu Hui <luhux76@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 or
+ * (at your option) any later version.
+ */
+
+#ifndef HW_MT7628_SPI_H
+#define HW_MT7628_SPI_H
+
+#include "hw/sysbus.h"
+#include "qom/object.h"
+
+#define TYPE_MT7628_SPI "mt7628-spi"
+OBJECT_DECLARE_SIMPLE_TYPE(mt7628SpiState, MT7628_SPI)
+
+#define MT7628_SPI_TX_BUFSIZE (36)
+#define MT7628_SPI_RX_BUFSIZE (32)
+
+struct mt7628SpiState {
+    SysBusDevice parent_obj;
+    MemoryRegion mmio;
+    SSIBus *spi;
+
+    /* real device only support cs0 and cs1 */
+    bool cs[2];           /* value: 0 deassert, 1 assert */
+    qemu_irq cs_lines[2];
+
+    bool bufmode;     /* 0 disable morebuf, 1 enable morebuf */
+    bool full_duplex; /* 0 half, 1 full   */
+
+    bool trans_busy;  /* 0 no task, 1 pending */
+    bool trans_start; /* write 1 start transfer action */
+
+    /* how many bits need transfer */
+    uint16_t tx_bitcount; /* 0 ~ 256 */
+    uint16_t rx_bitcount; /* 0 ~ 256 */
+    uint8_t cmd_bitcount; /* 0 ~ 32 */
+
+    uint32_t opcode;
+
+    uint8_t dido[MT7628_SPI_RX_BUFSIZE];
+};
+
+#endif
-- 
2.39.1

